mixin parseObject(obj)
  ul
    each val, key in obj
      li
        span #{key}:
          if typeof val === 'string'
            span #{val}
          else if typeof val === 'object'
            mixin parseObject(val)

mixin dropDown(subFolder, subFiles)
  if subFolder != '' && subFiles.length > 0
    li.dropdown
      a.dropdown-toggle(href="#",data-toggle="dropdown",unselectable="on") #{subFolder}&nbsp;
        b.caret
      ul.dropdown-menu
        each subFile in subFiles
          li: a(href="#{subFile.rel}") #{subFile.file}

mixin iForSymbolType(symbol)
  i(class=["alert", "alert-"+(symbol.type === "function" || symbol.type === "method" ? "info":"success")])

mixin labelForSymbolType(symbol)
  span(class=["label", "label-info", "radius", "ctx-type"])= symbol.ctx.type
  span= ' '

mixin labelForTag(tag)
  span(class=["label", "label-success", "radius", "ctx-type"])= tag.type
  span= ' '

mixin header(symbol, varName)
  - var header = symbol.ctx.name
  if header === 'exports'
    - header = varName
  if symbol.ctx.type === 'method' || symbol.ctx.type === 'function'
    - header += '('
    each tag in symbol.tags
      if tag.type === 'param'
        //- handle params with default value
        - header += tag.name + ', '
      if tag.type === 'exports' && symbol.ctx.name !== 'exports'
        - header = varName + '.' + header
    - header = header.replace(/,\s*$/, '')
    - header += ')'

  h2(id='#{symbol.ctx.name}')= header

!!!5
//if IE 8
  |<html class="no-js lt-ie9">
//if gt IE 8
  |<!--> <html class="no-js"> <!--
head
  meta(charset='utf-8')
  meta(http-equiv='X-UA-Compatible', content='IE=edge')
  title Javascript documentation
  meta(name='description', content='Javascript documentation')
  meta(name='viewport', content='width=device-width,initial-scale=1')
  link(rel='stylesheet', href='/bootstrap/dist/css/bootstrap.min.css')
  link(rel='stylesheet', href='/css/bootstrap-docs.css')
  link(rel='stylesheet', href='/prismjs/prism.css')
  style(type='text/css')
    .bs-docs-nav .navbar-nav > .dropdown > a:hover .caret {
      border-top-color: #fff;
      border-bottom-color: #fff;
    }
    .bs-docs-nav .navbar-nav > .dropdown > a .caret {
      border-top-color: #999;
      border-bottom-color: #999;
    }
    .bs-docs-nav .navbar-nav > li > .dropdown-menu {
      text-shadow: none;
    }
    .bs-docs-nav .navbar-nav > .open > a, .bs-docs-nav .navbar-nav > .open > a:hover, .bs-docs-nav .navbar-nav > .open > a:focus {
      background-color: #463265;
    }
    .row {
      margin-bottom: 20px;
    }
    .row h1:first-of-type {
      padding-top: 0;
    }
    .resizeable {
      padding: 5px 15px 5px 0;
      resize: vertical;
      overflow: auto;
    }
    .bs-docs-section > h1 {
      padding-bottom: 9px;
      margin: 40px 0 20px;
      border-bottom: 1px solid #eee;
    }
    .bs-example {
      padding-right: 0;
      background: #FFF;
    }
    .bs-example iframe {
      display: block;
      width: 100%;
      height: 100%;
      overflow: hidden;
      border: 0;
    }
    .preview-code {
      width: 100%;
      line-height: 1.428571429;
      color: #333;
      font-size: 13px;
      font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
      resize: none;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    .bs-sidebar .nav > li > a:not(.lv1) {
      padding-top: 3px;
      padding-bottom: 3px;
      padding-left: 30px;
      font-size: 90%;
    }
body(data-spy='scroll', data-target='#sub-nav')
  header.navbar.navbar-inverse.navbar-fixed-top.bs-docs-nav(role='banner')
    .container
      .navbar-header
        button.navbar-toggle(type='button', data-toggle='collapse', data-target='.bs-navbar-collapse')
          span.sr-only Toggle navigation
          span.icon-bar
          span.icon-bar
          span.icon-bar
        a.navbar-brand(href='index.html') Javascript documentation
      nav.collapse.navbar-collapse.bs-navbar-collapse(role='navigation')
        ul.nav.navbar-nav
          - var cacheFolder = ''
          - var subs = []
          each path in files
            - path.name = path.name.replace(/\\/g, '/');
            - var folder = path.name.substring(0,path.name.indexOf('/'))
            - var file = path.name.substring(path.name.indexOf('/')+1).replace('.js', '')

            if folder != cacheFolder
              mixin dropDown(cacheFolder, subs)
              - cacheFolder = folder
              - subs = []

            if folder == ''
              li: a(href="/#{path.relName}") #{file}
            else
              - subs.push({'file': file, 'rel': path.relName})

          mixin dropDown(cacheFolder, subs)

  .container.bs-docs-container
    .row
      .col-md-3
        .bs-sidebar.hidden-print.affix(role='complementary', id='sub-nav')
          ul.nav.bs-sidenav
            each symbol in dox
              if symbol.ctx.name
                li
                  a(href='##{symbol.ctx.name}')= symbol.ctx.name
      .col-md-9(role='main')
        .bs-docs-section
          if locals.readme
            section(id=name) !{readme}
          else
            - var path = locals.name.replace('.js', '')
            - var require = 'app/' + locals.name.replace('.js', '')
            - var filename = locals.name.replace(/^.*[\\\/]/, '').replace('.js', '')
            - var header = filename.replace(/-/g, ' ');
            - var header = header.charAt(0).toUpperCase() + header.slice(1);
            - var varName = filename.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });

            h1 #{header}
            pre.language-javascript
                code.language-javascript var #{varName} = require('#{require}');
          each symbol in dox
            if symbol.ctx.name
              section(id=symbol.ctx.name)
                //- mixin parseObject(symbol)
                mixin header(symbol, varName)
                if !symbol.gtype && symbol.type
                  p
                    span(class=["label", "label-inverse", "radius", "ctx-type"])= symbol.type
                else
                  p
                    mixin labelForSymbolType(symbol)
                    each tag in symbol.tags
                      if tag.type !== 'param' && tag.type !== 'return'
                        mixin labelForTag(tag)

                .description !{symbol.description.summary}
            if symbol.hasParams
              h4 Arguments
              ol
                each tag in symbol.tags
                  if tag.type == 'param'
                    //- TODO: handle params with default value
                    - var tagText = tag.name + ' (' + tag.types + ')'
                    if tag.description
                      - tagText += ': ' + tag.description
                    li= tagText

            if symbol.return
              h4 Returns
              each tag in symbol.tags
                if tag.type === 'return'
                  - var returnText = '(' + tag.types + ')'
                  if tag.description
                    - returnText += ': ' + tag.description
                  p= returnText

            - body = symbol.description.body.replace('<p>Example</p>', '<h4>Example</h4>')
            .language-javascript !{body}

  script(src='/jquery/jquery.js')
  script(src='/bootstrap/dist/js/bootstrap.js')
  script(src='/prismjs/prism.js')